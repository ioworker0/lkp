name: Reproduce Kernel Build Warning (Optimized LKP Method)

on:
  workflow_dispatch:

env:
  # The specific commit to be tested, used for the cache key
  KERNEL_COMMIT: 77da18de55ac6417e48905bec8b3c66f023b15a9

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git wget flex bison build-essential libssl-dev libelf-dev \
            binutils-loongarch64-linux-gnu

      - name: Install Clang-18 (as a close substitute for clang-20)
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18 all
          clang-18 --version

      - name: Clone LKP Test Scripts
        run: |
          git clone https://github.com/intel/lkp-tests.git ~/lkp-tests

      - name: Cache Kernel Repository
        id: kernel-cache
        uses: actions/cache@v4
        with:
          path: linux-next
          key: linux-next-${{ runner.os }}-${{ env.KERNEL_COMMIT }}

      - name: Clone kernel and checkout commit (if not cached)
        if: steps.kernel-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss. Cloning full repository..."
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
          cd linux-next
          git checkout ${{ env.KERNEL_COMMIT }}

      - name: Prepare build environment
        working-directory: ./linux-next
        run: |
          wget -O config 'https://download.01.org/0day-ci/archive/20250730/202507301256.cZlxQ10s-lkp@intel.com/config'
          mkdir build_dir
          cp config build_dir/.config

      - name: Build the kernel using LKP scripts
        id: build_step
        working-directory: ./linux-next
        run: |
          echo "### Preparing config with LKP script... ###"
          # Run olddefconfig using the LKP wrapper script, providing ALL required variables.
          COMPILER_INSTALL_PATH=$HOME/0day COMPILER=clang-18 CROSS_COMPILE=loongarch64-linux-gnu- \
          ~/lkp-tests/kbuild/make.cross W=1 O=build_dir ARCH=loongarch olddefconfig

          echo "### Starting main build with LKP script... ###"
          # Run the main build (vmlinux target) using the LKP wrapper script
          COMPILER_INSTALL_PATH=$HOME/0day COMPILER=clang-18 CROSS_COMPILE=loongarch64-linux-gnu- \
          ~/lkp-tests/kbuild/make.cross W=1 O=build_dir ARCH=loongarch vmlinux -j$(nproc) | tee build.log || true

      - name: Check for the specific warnings
        working-directory: ./linux-next
        run: |
          echo "Searching for objtool warnings in build.log..."
          WATCHDOG_WARN=$(grep -c "objtool: watchdog+.*: sibling call from callable instruction with modified stack frame" build.log)
          NOTIFY_WARN=$(grep -c "objtool: hungtask_pm_notify+.*: sibling call from callable instruction with modified stack frame" build.log)
          
          OBJTOOL_RUN=$(grep -c "OBJTOOL .*vmlinux.o" build.log)
          if [ "$OBJTOOL_RUN" -eq 0 ]; then
            echo "::error::Objtool was not run! Check the build configuration."
          else
            echo "::notice::Objtool was run successfully."
          fi
          
          if [ "$WATCHDOG_WARN" -gt 0 ] || [ "$NOTIFY_WARN" -gt 0 ]; then
            echo "::notice::SUCCESS: One or more expected warnings were successfully reproduced."
          else
            echo "::error::FAILURE: Could not reproduce the expected objtool warnings."
            # exit 1
          fi

      - name: Upload build log for inspection
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ./linux-next/build.log
