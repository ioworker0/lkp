name: Reproduce Kernel Build Warning

on:
  workflow_dispatch:

env:
  # Define the target commit hash here for easy access and caching
  KERNEL_COMMIT: 77da18de55ac6417e48905bec8b3c66f023b15a9

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git wget flex bison build-essential libssl-dev libelf-dev \
            binutils-loongarch64-linux-gnu

      - name: Install specific Clang version
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18 all
          clang-18 --version

      - name: Cache Kernel Repository
        id: kernel-cache
        uses: actions/cache@v4
        with:
          # The directory to cache
          path: linux-next
          # A unique key for the cache, based on the commit hash
          key: linux-next-${{ runner.os }}-${{ env.KERNEL_COMMIT }}

      - name: Clone kernel and checkout commit (if not cached)
        if: steps.kernel-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache miss. Cloning repository..."
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
          cd linux-next
          git checkout ${{ env.KERNEL_COMMIT }}

      - name: Prepare build environment
        # This step must always run, using the cached or freshly cloned repo
        working-directory: ./linux-next
        run: |
          wget -O config 'https://download.01.org/0day-ci/archive/20250730/202507301256.cZlxQ10s-lkp@intel.com/config'
          mkdir build_dir
          cp config build_dir/.config

      - name: Build the kernel (vmlinux only)
        id: build_step
        working-directory: ./linux-next
        run: |
          # Crucially, enable stack validation to force objtool to run
          ./scripts/config --file build_dir/.config --enable CONFIG_STACK_VALIDATION

          # Run olddefconfig to resolve any new dependencies from the change above
          make ARCH=loongarch CROSS_COMPILE=loongarch64-linux-gnu- CC=clang-18 O=build_dir W=1 olddefconfig

          # Now, build 'vmlinux' which will trigger the objtool check
          make ARCH=loongarch CROSS_COMPILE=loongarch64-linux-gnu- CC=clang-18 O=build_dir W=1 vmlinux -j$(nproc) | tee build.log || true

      - name: Check for the specific warnings
        working-directory: ./linux-next
        run: |
          echo "Searching for objtool warnings in build.log..."
          WATCHDOG_WARN=$(grep -c "objtool: watchdog+.*: sibling call from callable instruction with modified stack frame" build.log)
          NOTIFY_WARN=$(grep -c "objtool: hungtask_pm_notify+.*: sibling call from callable instruction with modified stack frame" build.log)
          
          if [ "$WATCHDOG_WARN" -gt 0 ] || [ "$NOTIFY_WARN" -gt 0 ]; then
            echo "::notice::SUCCESS: One or more expected warnings were successfully reproduced."
            if [ "$WATCHDOG_WARN" -gt 0 ]; then
              echo "Found 'watchdog' warning."
            fi
            if [ "$NOTIFY_WARN" -gt 0 ]; then
              echo "Found 'hungtask_pm_notify' warning."
            fi
          else
            echo "::error::FAILURE: Could not reproduce the expected objtool warnings."
            # Uncomment the next line to make the workflow fail if reproduction fails
            # exit 1 
          fi

      - name: Upload build log for inspection
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ./linux-next/build.log
